//Preload

function preload() {
//phaser requires these lines

game.load.baseURL = 'http://examples.phaser.io/assets/';
game.load.crossOrigin = 'Anonymous';

game.load.image('stars', 'misc/starfield.jpg');

game.load.spritesheet('ship', 'sprites/humstar.png', 32, 32);

game.load.image('bullet', 'sprites/bullet');

game.load.image('monster', 'sprites/shinyball.png');

game.load.image('heart', 'sprites/carrot.png');
    
game.load.spritesheet('boom', 'sprites/explosion.png', 64, 64);
    
game.load.spritesheet('coin', 'sprites/coin.png', 32, 32);



game.load.image('weaponBox', 'sprites/block.png');
    
}

//global variables


var starfield;     //this is the background
var ship;          // this is the little hamster ship
var bullets;       //these are my bullets
var nextFire = 0;  //my fire rate
var fireRate = 50; //my fire rate

var monsters;
var numberOfMonsters = 30;
var speedOfMonsters = 50;
var monsterSpeed = 150;
var tolerance = 500;

var numberOfLives = 5;
var hearts;
var lifetext;

var explosions;

var pointsText;
var points = 0;
var coin;
var highScoreText;
var highScoreNumber = 0;
var pointsInterval = 0;

var spawningInterval = 0;
var randomizeTimer = 0;




function addExplosionAnimation(monster){
    monster.animations.add('boom');
}




function create() {

    //world physics stuff
    game.world.setBounds(0,0, 1600, 1200);
    game.physics.startSystem(Phaser.Physics.P2JS);
    game.physics.p2.defaultRestitution = 0.9;
    
    //background
    starfield = game.add.tileSprite(0,0, 1200, 1200, 'stars');
    starfield.fixedToCamera = true;
    
    //create coin/points
        coin = game.add.sprite(game.world.randomX, game.world.randomY, 'coin');
    coin.animations.add('coinAnimation', [0,1,2,3,4,5], 10, true);
    coin.play('coinAnimation');
    game.physics.enable(coin, Phaser.Physics.ARCADE);
    
    //make weapon box
    weaponBox = game.add.sprite(game.world.randomX, game.world.randomY,'weaponBox')
    
    
    
    
    //game over stuff here
    gameOverText = game.add.text(300,300, 'GAME OVER', {
        font:'48px Arial',
        fill: '#fff'
    });
    gameOverText.visible = false;
    gameOverText.fixedToCamera = true;
    
    
    
    
    //add life
    hearts = game.add.group();
    hearts.fixedToCamera = true;
    
    lifeText = game.add.text(40, 30, 'Lives: ',{
        font: '34px Arial',
        fill: '#fff'
    });
    lifeText.fixedToCamera = true;
    //hamster animations
    ship = game.add.sprite(200,100, 'ship');
    ship.scale.set(2);
    ship.smoothed = false;
    ship.animations.add('fly', [0,1,2,3,4,5], 10, true);
    ship.play('fly');
    
    // activate the ship's Physics.
    game.physics.enable(ship, Phaser.Physics.ARCADE);
    game.camera.follow(ship);
    ship.body.collideWorldBounds = true;
    
    //bullet physics.
    bullets = game.add.group();
    bullets.enableBody = true;
    bullets.physicsBodyType = Phaser.Physics.ARCADE;
    //Bullet detections
    bullets.createMultiple(50, 'bullet');
    bullets.setAll('checkWorldBounds', true);
    bullets.setAll('outOfBoundsKill', true);
    
    //add monsters here
    monsters = game.add.group();
    monsters.enableBody = true;
    monsters.physicsBodyType = Phaser.Physics.ARCADE;
    
    //create monsters here
    createMonsters();
    
    //create how many lives you have
    createLives();

    
}


function start(){
    game.time.reset();
    hearts.callAll('revive');
    monsters.removeAll();
    //numberOfMOnsters = 30;
    //monsterSpeed = 50
    
    createMonsters();
    ship.revive();
    
    gameOverText.visible = false;
}







 
 function createLives(){
     for(var i = 0; i < numberOfLives; i++){
         var heart = hearts.create(250 - (30 * i), 40, 'heart');
     }
 }
 
 
 
 function createMonsters(){
    var count = 0;
    var inverseTolerance = tolerance;
    
    while(count < numberOfMonsters){
        inverseTolerance *= -1;
        var randX = game.world.randomX + inverseTolerance;
        var randY = game.world.randomY + inverseTolerance;
        
        
        
        //a < x === b (check if number is between range)
        if(ship.position.x - tolerance < randX === randX < ship.position.x + tolerance){
            continue;
        }
        
        count += 1;
        var monster = monsters.create(randX, randY, 'monster');
   
    }
}





explosions = game.add.group();
explosions.createMultiple(30, 'boom');
explosions.forEach(addExplosionAnimation, this);


//Update

function update() {
    
    //Mpvement Controls
    movementControlsForShip();
    
    
    //move the background with us!
    moveBackground();
    
    //i want to shoot bullets from ship
    shipFireControls();
    
   // i want to detect if i hit something
    collisionDetection();
    
    //i want the monsters to move to me.
    monsterMovement();
}
function monsterMovement(){
    //get each monster to have the same AI
    monsters.forEach(
        function(singleMonster){
            //move
            game.physics.arcade.moveToObject(singleMonster, ship, monsterSpeed);
        },
        game.physics
    );
}
    function shipHitMonster(theShip, monster){
        //kill the monster first
        monster.kill();
        
        
        //destroy life
        var heart = hearts.getFirstAlive();
        //if out of lives display Game Over
        if(heart){
            heart.kill();
        }
        //its game over ...................wop wop.
        if(hearts.countLiving() < 1){
            theShip.kill();
        
        gameOverText.text = "GAME OVER";
        gameOverText.visible = true;
        
        //let the player play again?
        game.input.onTap.addOnce(start, this);
        }
    }
    function bulletHitMonster(bullet, monster){
        //when i use bullets to shoot monster, i destroy both objects
        bullet.kill();
        monster.kill();
    }
    function collisionDetection(){
        //check to see if bullet hit monster
        game.physics.arcade.overlap(bullets,monsters, bulletHitMonster, null, this);
    
        //check if monster hits the ship
        game.physics.arcade.overlap(ship, monsters, shipHitMonster, null, this);
    }
    function fire(){
        if(game.time.now >nextFire && bullets.countDead() > 0){
            //my fire rate goes here
            nextFire = game.time.now + fireRate;
            //out of 50 bullets, get first Dead/remaining
            var bullet = bullets.getFirstDead();
            //
            bullet.reset(ship.x + 30, ship.y + 50);
            //speed of bullets to pointer
            game.physics.arcade.moveToPointer(bullet, 600);
        }
    }
    function shipFireControls(){
        //i want to use my mouse to aim and shoot
        game.physics.arcade.angleToPointer(ship);
        
        //whenever i click, i shoot
        if(game.input.activePointer.isDown){
            //fire bullet
            fire();
        }
    }
 function moveBackground(){
     
     if(!game.camera.atLimit.x){
         starfield.tilePosition.x -= (ship.body.velocity.x * game.time.physicsElapsed);
     }
     
      if(!game.camera.atLimit.y){
         starfield.tilePosition.y -= (ship.body.velocity.y * game.time.physicsElapsed);
      }
 }
function movementControlsForShip(){
    //WASD Controls
    var wasdControls = {
        up:   game.input.keyboard.addKey(Phaser.Keyboard.W),
        down: game.input.keyboard.addKey(Phaser.Keyboard.S),
        left: game.input.keyboard.addKey(Phaser.Keyboard.A),
        right:game.input.keyboard.addKey(Phaser.Keyboard.D),
    };
    ship.body.velocity.setTo(0,0);
    //move left
    if(wasdControls.left.isDown){
        ship.body.velocity.x = -400;
    }
    //move right
    else if(wasdControls.right.isDown){
        ship.body.velocity.x = 400;
    }
    //move up
    if(wasdControls.up.isDown){
        ship.body.velocity.y = -400;
    }
    //move down
    else if(wasdControls.down.isDown){
        ship.body.velocity.y = 400;
    }
}



