//Preload

function preload() {
//phaser requires these lines

game.load.baseURL = 'http://examples.phaser.io/assets/';
game.load.crossOrigin = 'Anonymous';

game.load.image('stars', 'misc/starfield.jpg');

game.load.spritesheet('ship', 'sprites/humstar.png', 32, 32);

game.load.image('bullet', 'sprites/bullet')

game.load.image('monster', 'sprites/shinyball.png');

}

//Create

var starfield;     //this is the background
var ship;          // this is the little hamster ship
var bullets;       //these are my bullets
var nextFire = 0;  //my fire rate
var fireRate = 50; //my fire rate

var monsters;
var numberOfMonsters = 10;
var speedOfMonsters = 50;

var tolerance;


function create() {

//this is to start the system
game.world.setBounds(0,0, 1600, 1200);
game.physics.startSystem(Phaser.Physics.P2JS);
game.physics.p2.defaultRestitution = 0.9;

//add the bacground image starfield
starfield = game.add.tileSprite(0,0, 800, 600, 'stars');
starfield.fixedToCamera = true;
console.log(starfield);
//hamster animations
ship = game.add.sprite(200,100, 'ship');
ship.scale.set(2);
ship.smoothed = false;
ship.animations.add('fly', [0,1,2,3,4,5], 10, true);
ship.play('fly');

// activate the ship's Physics.
game.physics.enable(ship, Phaser.Physics.ARCADE);
game.camera.follow(ship);
ship.body.collideWorldBounds = true;

//bullet physics.
bullets = game.add.group();
bullets.enableBody = true;
bullets.physicsBodyType = Phaser.Physics.ARCADE;
//Bullet detections
bullets.createMultiple(50, 'bullet');
bullets.setAll('checkWorldBounds', true);
bullets.setAll('outOfBoundsKill', true);

//add monsters here
monsters = game.add.group();
monsters.enableBody = true;
monsters.physicsBodyType = Phaser.Physics.ARCADE;

//create monsters here
createMonsters();

}
 
//  function createMonsters(){


//Update

function update() {
    
    //Mpvement Controls
    movementControlsForShip();
    
    
    //move the background with us!
    moveBackground();
    
    //i want to shoot bullets from ship
    shipFireControls();
    
   
    
    
    
    
    
}
    
    function fire(){
        if(game.time.now >nextFire && bullets.countDead() > 0){
            //my fire rate goes here
            nextFire = game.time.now + fireRate;
            //out of 50 bullets, get first Dead/remaining
            var bullet = bullets.getFirstDead();
            //
            bullet.reset(ship.x + 30, ship.y + 50);
            //speed of bullets to pointer
            game.physics.arcade.moveToPointer(bullet, 600);
        }
        
        
    }
    
    
    function shipFireControls(){
        //i want to use my mouse to aim and shoot
        game.physics.arcade.angleToPointer(ship);
        
        //whenever i click, i shoot
        if(game.input.activePointer.isDown){
            //fire bullet
            fire();
        }
        
        
        
    }
    
    
 
 function moveBackground(){
     
     if(!game.camera.atLimit.x){
         starfield.tilePosition.x -= (ship.body.velocity.x * game.time.physicsElapsed);
     }
     
      if(!game.camera.atLimit.y){
         starfield.tilePosition.y -= (ship.body.velocity.y * game.time.physicsElapsed);
      }
 }
 
function movementControlsForShip(){
    //WASD Controls
    var wasdControls = {
        up:   game.input.keyboard.addKey(Phaser.Keyboard.W),
        down: game.input.keyboard.addKey(Phaser.Keyboard.S),
        left: game.input.keyboard.addKey(Phaser.Keyboard.A),
        right:game.input.keyboard.addKey(Phaser.Keyboard.D),
    };
    ship.body.velocity.setTo(0,0);
    //move left
    if(wasdControls.left.isDown){
        ship.body.velocity.x = -400;
    }
    //move right
    else if(wasdControls.right.isDown){
        ship.body.velocity.x = 400;
    }
    //move up
    if(wasdControls.up.isDown){
        ship.body.velocity.y = -400;
    }
    //move down
    else if(wasdControls.down.isDown){
        ship.body.velocity.y = 400;
    }
    
   
}
createMonsters();
function creatMonsters(){
    
    var count = 0;
    var inverseTolerence = tolerance;
    
    while(count < numberOfMonsters){
        inverseTolerance *= -1;
        var randX = game.world.randomX + inverseTolerance;
        var randY = game.world.randomY + inverseTolerance;
        
        
        
        //a < x === b (check if number is between range)
        if(ship.position.x - tolerance < randX < ship.position.x + tolerance){
            continue;
        }
        
        count++;
        var monster = monsters.create(randX, randY, 'monster');
   
    }
}
